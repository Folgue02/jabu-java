package me.folgue.jabu.configuration.projectschema;

import java.nio.file.*;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.io.File;
import java.util.*;

import javax.annotation.Nullable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import me.folgue.jabu.configuration.ProjectType;

/**
 * Schema of a project file structure.
 * @author folgue
 */
@JsonIgnoreProperties("files")
public record ProjectSchema(
        String sourceDir, 
        String targetDir,
        String resourceDir,
        List<String> otherDirs,
        Map<String, String> files) {

    private static final String HELLO_WORLD_TEMPLATE = """
        /**
         * This file has been generated by the 'create' task from jabu.
         */

        public class App {
            public static void main(String[] args) {
                System.out.println("Hello World");
            }
        }
        """;

    @FunctionalInterface
    public static interface CreationHook {
        /**
         * This method will be called before the creation of the directory.
         * @param dirToBeCreated The directory that will be created.
         */
        void beforeCreationHook(int count, File dirToBeCreated);

        /**
         * @return A {@link CreationHook} that doesn't do anything.
         */
        static CreationHook getDefaultHook() {
            return (i, f) -> {};
        }
    }

    /**
     * @return An immutable {@link List} of the directories of the schema.
     */
    @JsonIgnore
    public List<String> getDirs() {
        return List.of(this.sourceDir, this.targetDir, this.resourceDir);
    }

    /**
     * Creates all the schema's directories appended after the {@code base} directory
     * parameter.
     * @param base The directory where the schema's directories will be created in.
     * @throws IOException If any creation fails.
     */
    public void createDirs(String base) throws IOException { 
        this.createDirs(base, CreationHook.getDefaultHook());
    }

    /**
     * Creates all the schema's directories appended after the {@code base} directory
     * parameter.
     * @param base The directory where the schema's directories will be created in.
     * @param hook Method to be called every time before the creation of a directory,
     * this method gets passed the count of directories that have been created, and
     * a {@link File} representing the directory that will be created after the 
     * hook's execution.
     * @throws IOException If any creation fails.
     */
    public void createDirs(String base, CreationHook hook) throws IOException {
        var dirs = this.getDirs().stream()
                .map(d -> Path.of(base, d).toFile()).toList();

        for (int i=0;i < dirs.size();i++) {
            hook.beforeCreationHook(i, dirs.get(i));
            dirs.get(i).mkdirs();
        }
    }

    public void createFiles(String baseDir, CreationHook hook) throws IOException {
        for (var es : this.files.entrySet()) {
            Path targetFilePath = Path.of(baseDir, es.getKey());
            String fileContent;

            if (es.getValue() == null)
                fileContent = "";
            else
                fileContent = es.getValue();

            Files.writeString(targetFilePath, fileContent);
        }
    }

    public void createFiles(String baseDir) throws IOException {
        this.createFiles(baseDir, CreationHook.getDefaultHook());
    }

    public void create(String baseDir, @Nullable CreationHook dirCreationHook, @Nullable CreationHook fileCreationHook) 
            throws IOException {
        if (dirCreationHook == null)
            dirCreationHook = CreationHook.getDefaultHook();

        if (fileCreationHook == null)
            fileCreationHook = CreationHook.getDefaultHook();

        this.createDirs(baseDir, dirCreationHook);
        this.createFiles(baseDir, fileCreationHook);
    }

    /**
     * Creates a project schema based on the project's type.
     * @param projectType Type of project
     * @return An instance of {@link ProjectSchema} with the default configuration 
     * for the given project type.
     */
    public static ProjectSchema ofType(ProjectType projectType) {
        return switch (projectType) {
            case Binary, Library -> new ProjectSchema(
                    "./src/main/",
                    "./target/", 
                    "./src/resources/", 
                    List.of(), 
                    Map.of("src/main/App.java", HELLO_WORLD_TEMPLATE));
            default -> null;
        };
    }
}
